<#@ assembly name="System.Core"
#><#@ assembly name="EnvDTE"
#><#@ assembly name="EnvDTE80" 
#><#@ assembly name="VSLangProj" 
#><#@ assembly name="$(TargetDir)Serenity.Core.dll"
#><#@ assembly name="$(TargetDir)Serenity.Web.dll" 
#><#@ assembly name="$(ProjectDir)tools\JsEngine\MsieJavaScriptEngine.dll"
#><#@ import namespace="System.Linq" 
#><#@ import namespace="System.Collections.Generic" 
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating" 
#><#@ import namespace="Serenity.CodeGeneration"
#><#@ import namespace="MsieJavaScriptEngine"
#><#+

public class TSTypeLister
{
    private string projectDir;

    public TSTypeLister(string projectDir)
    {
        this.projectDir = System.IO.Path.GetFullPath(projectDir);
    }

    private MsieJsEngine SetupJsEngine()
    {
        MsieJsEngine jsEngine;
        try
        {
            jsEngine = new MsieJsEngine(new JsEngineSettings { EngineMode = JsEngineMode.ChakraIeJsRt });
        }
        catch
        {
            jsEngine = new MsieJsEngine();
        }
        try
        {
            return jsEngine;
        }
        catch
        {
            jsEngine.Dispose();
            throw;
        }
    }

    public List<ExternalType> List()
    {
        var files = Directory.GetFiles(projectDir + @"Modules", "*.ts", SearchOption.AllDirectories)
            .Concat(Directory.GetFiles(projectDir + @"Imports", "*.ts", SearchOption.AllDirectories))
            .Concat(Directory.GetFiles(projectDir + @"Scripts", "*.ts", SearchOption.AllDirectories))
            .Where(x => !x.EndsWith(".d.ts") || x.IndexOf("Serenity") >= 0).OrderBy(x => x);

        var json2 = File.ReadAllText(projectDir + @"tools\JsEngine\json2.min.js");
        var tsServices = File.ReadAllText(projectDir + @"tools\JsEngine\typeScriptServices.js");
        string codeGeneration;
        using (var sr = new StreamReader(
            typeof(Serenity.CodeGeneration.DtoGenerator).Assembly.GetManifestResourceStream(
                "Serenity.Web.Scripts.tsservices.Serenity.CodeGeneration.js")))
        {
            codeGeneration = sr.ReadToEnd();
        }

        StringBuilder sb = new StringBuilder();
        sb.AppendLine(json2);
        sb.AppendLine(tsServices);
        sb.AppendLine(codeGeneration);
        foreach (var file in files)
            sb.AppendLine("Serenity.CodeGeneration.addSourceFile(" +
                file.Replace('\\', '/').ToJson() + ", " +
                File.ReadAllText(file).ToJson() + ");");

        var cacheDir = Path.Combine(Path.GetTempPath(), ".tstypecache");

        var md5 = System.Security.Cryptography.MD5.Create();
        var hash = BitConverter.ToString(md5.ComputeHash(Encoding.Unicode.GetBytes(sb.ToString())));
        var cacheFile = Path.Combine(cacheDir, hash + ".json");

        if (File.Exists(cacheFile))
        {
            try
            {
                return JSON.Parse<List<ExternalType>>(File.ReadAllText(cacheFile));
            }
            catch
            {
            }
        }

        Action<string> writeCache = (json) =>
        {
            try
            {
                Directory.CreateDirectory(cacheDir);
                Serenity.IO.TemporaryFileHelper.PurgeDirectory(cacheDir, TimeSpan.Zero, 99, null);
                File.WriteAllText(cacheFile, json);
            }
            catch
            {
            }
        };

        using (var jsEngine = SetupJsEngine())
        {
            jsEngine.Execute(sb.ToString());
            var json = jsEngine.Evaluate<string>("JSON.stringify(Serenity.CodeGeneration.parseTypes())");
            writeCache(json);
            return JSON.Parse<List<ExternalType>>(json);
        }
    }
}

public class TypeScriptCompiler
{
    private string projectDir;

    public TypeScriptCompiler(string projectDir)
    {
        this.projectDir = System.IO.Path.GetFullPath(projectDir);
    }

public string DetermineTSCPath() {
        var packages = Path.GetFullPath(Path.Combine(this.projectDir, @"..\..\packages"));

        var list = new List<string>();
        
        if (Directory.Exists(packages)) 
        {
            foreach (var dir in Directory.GetDirectories(packages, "Microsoft.TypeScript.MSBuild.*")) 
            {
                list.AddRange(Directory.GetFiles(Path.Combine(dir, @"tools\tsc"), "tsc.exe"));
                list.AddRange(Directory.GetFiles(Path.Combine(dir, @"tools\tsc"), "tsc.js"));
            }

            if (list.Count > 0)
            {
                return list.OrderByDescending(x => Path.GetDirectoryName(x))
                    .FirstOrDefault();
            }
        }

        var pf86 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86),
            @"Microsoft SDKs\TypeScript\");

        var pf64 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles),
            @"Microsoft SDKs\TypeScript\");

        if (Directory.Exists(pf86)) {
            list.AddRange(Directory.GetFiles(pf86, "tsc.exe", SearchOption.AllDirectories));
            list.AddRange(Directory.GetFiles(pf86, "tsc.js", SearchOption.AllDirectories));
        }
        if (Directory.Exists(pf64)) {
            list.AddRange(Directory.GetFiles(pf64, "tsc.exe", SearchOption.AllDirectories));
            list.AddRange(Directory.GetFiles(pf64, "tsc.js", SearchOption.AllDirectories));
        }

        if (list.Count > 0)
        {
            return list.OrderByDescending(x => Path.GetFileName(Path.GetDirectoryName(x)))
                .FirstOrDefault();
        }

        throw new Exception("Can't determine path of TSC.exe/TSC.js that is required to compile generated TypeScript files!");
    }

    public string DetermineNodePath() {
        
        string fullPath;

        var environmentPath = Environment.GetEnvironmentVariable("PATH");
        foreach (var path in environmentPath.Split(';'))
        {
            fullPath = Path.Combine(path, "node.exe");
            if (File.Exists(fullPath))
                return fullPath;
        }

        fullPath = Path.Combine(projectDir, @"tools\Node\node.exe");
        if (File.Exists(fullPath))
            return fullPath;

        fullPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86), @"NodeJS\node.exe");
        if (File.Exists(fullPath))
            return fullPath;

        fullPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), @"NodeJS\node.exe");
        if (File.Exists(fullPath))
            return fullPath;

        throw new Exception("Can't determine path of Node.exe that is required to compile generated TypeScript files!");
    }

    public void Compile(string workingDirectory, string arguments) {
        var tscPath = DetermineTSCPath();
        if (Path.GetExtension(tscPath).ToLowerInvariant() == ".js") {
            arguments = '"' + tscPath + '"' + " " + arguments;
            tscPath = DetermineNodePath();
        }
            
        var psi = new System.Diagnostics.ProcessStartInfo(tscPath, arguments);
        psi.WorkingDirectory = workingDirectory;
        System.Diagnostics.Process.Start(psi).WaitForExit(10000);
    }
}

public class TemplateAssemblyResolver
{
    private List<Tuple<string, AssemblyName>> assemblyNames = new List<Tuple<string, AssemblyName>>();

    public TemplateAssemblyResolver(params string[] folders) {
        foreach (var folder in folders) {
            foreach (var file in Directory.GetFiles(folder, "*.dll")) {
                try {
                    var name = AssemblyName.GetAssemblyName(file);
                    if (name != null)
                        assemblyNames.Add(new Tuple<string, AssemblyName>(file, name));
                }
                catch {
                }
            }
        }
    }

    public Assembly Resolve(object sender, ResolveEventArgs args)
    {
        try {
            var name = new AssemblyName(args.Name).Name;
            foreach (var tuple in assemblyNames) {
                if (name == tuple.Item2.Name) {
                    try {
                        return Assembly.LoadFrom(tuple.Item1);
                    }
                    catch {
                        return null;
                    }
                }
            }
        }
        catch {
        }

        return null;
    }
}

#>
